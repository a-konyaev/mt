package ru.mt;

/**
 * Обработчик транзакций по переводу денег.
 * фактически реализует бизнес-логику перевода денег.
 *
 *   - работает с таблицей transfer_query (? может переименовать ее в transaction), у коророй след. колонки:
 *     - request_id (PK)
 *     - timastamp
 *     - account_from
 *     - account_to
 *     - amount
 *     - status
 *
 *   - при получении очередного запроса из очереди проходит стадии, которые соотв. статусам запроса
 *     (важно! эта обработка идемпотентна, т.е. если обработчик упал при обработке запроса из очереди, то после рестарта он снова начнет выполнять этот же запрос):
 *
 *     - взять запрос из очереди на "посмотерть", т.е. не извлекать пока окончательно.
 *
 *     CREATED ()
 *       проверяет, есть в табл. transfer_query запрос с таким же request_id
 *       - если есть, идем в стадию, соотв. статусу, который сейчас прописан у запроса
 *       - если нет, добавляет новую запись в transfer_query со статусом STARTED и перейти к этой стадии
 *
 *     STARTED ():
 *       - AccountService: зарезервируй у account_from сумму amount
 *       - если ответ OK, то обновить статус на RESERVED и перейти к этой стадии
 *       - если ответ ERROR или CANCELED, то обновить статус на DENIED и перейти к этой стадии
 *       - иначе (ответ DONE)
 *
 *     RESERVED (деньги зарезервированы у счета From):
 *       - AccountService: добавить сумму amount на счет account_to
 *       - если ответ OK, то обновить статус на ADDED и перейти к этой стадии
 *       - если ответ ERROR, то обновить статус на CANCELLING и перейти к этой стадии
 *
 *     ADDED (деньги добавлены на счет To):
 *       - AccountService: списать ранее зарезервированную сумму amount со счета account_to
 *       - если ответ OK, то обновить статус на DONE и перейти к этой стадии
 *       - если ответ ERROR, то обновить статус на ERROR и перейти к этой стадии
 *
 *     CANCELLING ()
 *       - AccountService: отменить резервирование суммы amount на счете account_to
 *       - если ответ OK, то обновить статус на DENIED и перейти к этой стадии
 *       - если ответ ERROR, то обновить статус на ERROR и перейти к этой стадии
 *
 *     DONE (ранее зарезервированные деньги списаны со счета From):
 *     DENIED ():
 *     ERROR ():
 *       - завершение обработки события - коммит в очереди для текущего запроса, переход к следующему
 */
public class TransactionProcessor {
}
