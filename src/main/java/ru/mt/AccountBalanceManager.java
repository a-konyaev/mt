package ru.mt;

/*
  Отвечает за управление балансом своей пачки счетов, т.е. только этот АМ имеет доступ, причем синхронный, к счетам, за который отвечает.
  Для балансировки, можно поднять несколько АМ-ов.
  Все вызовы обрабатывает через запросы, которые добавляются в табл. account_manager_call.
  При этом обрабатывает только те запросы, которые относятся к его пачке счетов (см. AccountManagerCoordinator)
  Алгоритм получения новых запросов:
    (*) можно сделать очередь, в которую тот, кто создает новые запросы, будет публиковать событие с ИД запроса, а AccountManager-ы слушают эту очередь.
    - периодически получает из БД запросы для его пачки счетов, которые еще не обработаны и упорядоченные по возрастанию времени (т.е. первыми идут самые старые).
      select from account_manager_call
      whete <ИД счета> in (пачка счетов данного АМ) and <результат выполнения> is null
      order by timestamp desc
    - последовательно обрабатывает запросы, причем внутри одной транзакции с проставлением статуса запроса.

  работает с таблицами в БД:
    - account_balance - хранит текущий баланс счета, колонки:
      - ИД счета (PK)
      - сумма
    - account_balance_reverved - записи о резервировании средств на счете, колонки:
      - ИД счета (PK)
      - ИД транзакции
      - timastamp (? нужно ли)
      - сумма резервирования
      - статус - см. AccountReservationStatus
 */
public class AccountBalanceManager {

    /**
     * получить баланс счета
     *
     * @param accountId
     * @return доступная сумма на балансе с учетом всех зарезервированных средств
     */
    public double getBalance(String accountId) {
        /*
        - сумма зарезервированных = сумму денег для всех записей в account_balance_reverved с заданным ИД счета, у которых статус ОК
        - доступная сумма = сумма зарезервированных + значение баланса из табл. account_balance
         */
        return 0;
    }

    /**
     * Зарезервировать деньги на счете
     *
     * @param accountId     ИД счета
     * @param transactionId ИД транзакции, в рамках которой выполнить резервирование
     * @param amount        сумма денег
     * @return статус резервирования
     */
    public AccountReservationStatus reserveAmount(String accountId, String transactionId, double amount) {
        /*
        - (* на будущее) если время ИД запроса старое (больше макс), то возвращаем ошибку
            это нужно для оптимизации работы с таблицей, чтобы не перелопачивать все записи.
        - если резервирования с таким ИД еще нет, то:
          - получим сумму на счете с учетом всех зарезервированных денег
          - если эта сумма >= чем сумма, кот. надо зарезервировать, то
            - создаем новую запись в account_balance_reverved с заданной суммой резервирования и со статусом ОК
            - возвращаем ОК
          - иначе
            - создаем новую запись в account_balance_reverved с заданной суммой резервирования и со статусом ERROR
            - возвращаем ERROR
        - если уже есть резервирование с таким ИД запроса, то смотрим на его статус:
          - если ERROR, то проверим еще раз, вдруг теперь денег хватает
            - если также не хватает, то возвращаем ERROR
            - иначе, меняем статус резервирования на OK и возвращаем OK
          - иначе - возвращает тот статус, который получили (OK, DONE или CANCELED)
         */
        return AccountReservationStatus.OK;
    }

    /**
     * списать ранее зарезервированную сумму со счета
     *
     * @param accountId
     * @param transactionId
     * @return статус OK/ERROR
     */
    public boolean debitReservedAmount(String accountId, String transactionId) {
        /*
        - если статус резервирования с заданным ИД != OK, то возвращаем ошибку
        - иначе (статус = OK), в одной транзакции в БД:
          - уменьшаем баланс счета в account_balance
          - выставляем статус для резервирования = DONE
         */
        return true;
    }

    /**
     * отменить ранее созданное резервирование суммы
     *
     * @param accountId
     * @param transactionId
     * @return статус OK/ERROR
     */
    public boolean cancelReservedAmount(String accountId, String transactionId) {
        /*
        - если статус резервирования с заданным ИД != OK, то возвращаем ошибку
        - иначе - устанавливаем статус резервирования = CANCELED
         */
        return true;
    }

    /**
     * добавить сумму на счет
     *
     * @param accountId
     * @param transactionId
     * @param amount
     * @return статус OK/ERROR
     */
    public boolean addAmount(String accountId, String transactionId, double amount) {
        /*
        - увеличиваем баланс счета в табл. account_balance
        - (*) если реализовать функцию блокировки счета, то можно вернуть ошибку.
         */
        return true;
    }

}
